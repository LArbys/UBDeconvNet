display: 1

#vic
#average_loss: 20

#lr_policy: "fixed"
# lr for normalized softmax
#base_lr: 0.001
base_lr: 0.00005
# standard momentum
# momentum: 0.9
momentum: 0.0
weight_decay: 0.001
lr_policy: "inv"
gamma: 0.00001
power: 0.75

# gradient accumulation (https://groups.google.com/forum/#!topic/caffe-users/PMbycfbpKcY)
# A weight update / iteration is done for batch_size * iter_size inputs at a time. 
# Each solver iteration reported is accumulated by running `iter_size` calls to forward + backward. See
iter_size: 1

solver_mode: GPU
type: "RMSProp"
rms_decay: 0.90

max_iter: 100000
#weight_decay: 0.0005
snapshot: 4000
snapshot_format: HDF5 
snapshot_prefix: "conv_pretrained_rms_freeze"
#test_initialization: false
debug_info: false


net_param {


### data 

layer {
  name: "data"
  type: "ROOTData"
  top: "data"
  top: "label"

  root_data_param {
    batch_size: 4
    filler_config: "train_filler.cfg"
    filler_name: "Train"
  }
}

###conv 1

layer { name: "conv1" type: "Convolution" bottom: "data" top: "conv1"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  convolution_param { num_output: 96 kernel_size: 11 stride: 4
    weight_filler { type: "msra" }
  }
}


#layer {
#    name: "conv1_bn" type: "BatchNorm" bottom: "conv1" top: "conv1"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "conv1_scale" type: "Scale" bottom: "conv1" top: "conv1"
#    param { lr_mult: 0 decay_mult: 0 }
#    param { lr_mult: 0 decay_mult: 0 }
#    scale_param { bias_term: true }
#}
layer { name: "relu1" type: "ReLU" bottom: "conv1" top: "conv1" }

###pool 1

layer { name: "pool1" type: "Pooling" bottom: "conv1" top: "pool1"
    pooling_param { pool: MAX kernel_size: 3 stride: 2 }
}

###conv 2

layer { name: "conv2" type: "Convolution" bottom: "pool1" top: "conv2"
    param { lr_mult: 0 decay_mult: 0}
    param { lr_mult: 0 decay_mult: 0}
  convolution_param { num_output: 256 pad: 2 kernel_size: 5 group: 2
      weight_filler { type: "msra" }
  }
}


#layer {
#    name: "conv2_bn" type: "BatchNorm" bottom: "conv2" top: "conv2"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "conv2_scale" type: "Scale" bottom: "conv2" top: "conv2"
#    param { lr_mult: 0 decay_mult: 0 }
#    param { lr_mult: 0 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu2" type: "ReLU"  bottom: "conv2" top: "conv2" }

### pool2

layer { name: "pool2" type: "Pooling" bottom: "conv2" top: "pool2"
  pooling_param { pool: MAX kernel_size: 3 stride: 2 }
}

### conv3

layer { name: "conv3" type: "Convolution" bottom: "pool2" top: "conv3"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  convolution_param { num_output: 384 pad: 1 kernel_size: 3
    weight_filler { type: "msra" }
  }
 }


#layer {
#    name: "conv3_bn" type: "BatchNorm" bottom: "conv3" top: "conv3"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "conv3_scale" type: "Scale" bottom: "conv3" top: "conv3"
#    param { lr_mult: 0 decay_mult: 0 }
#    param { lr_mult: 0 decay_mult: 0 }
#    scale_param { bias_term: true }
#}
layer { name: "relu3" type: "ReLU" bottom: "conv3" top: "conv3" }


### conv4

layer { name: "conv4" type: "Convolution" bottom: "conv3" top: "conv4"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
  convolution_param { num_output: 384 pad: 1 kernel_size: 3 group: 2
    weight_filler { type: "msra" }
  }
}

#layer {
#    name: "conv4_bn" type: "BatchNorm" bottom: "conv4" top: "conv4"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "conv4_scale" type: "Scale" bottom: "conv4" top: "conv4"
#    param { lr_mult: 0 decay_mult: 0 }
#    param { lr_mult: 0 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu4" type: "ReLU" bottom: "conv4" top: "conv4" }


### conv5

layer { name: "conv5" type: "Convolution" bottom: "conv4" top: "conv5"
  param { lr_mult: 0 decay_mult: 0 }
  param { lr_mult: 0 decay_mult: 0 }
 
  convolution_param { num_output: 256 pad: 1 kernel_size: 3 group: 2
      weight_filler { type: "msra" }
  }
}

#layer {
#    name: "conv5_bn" type: "BatchNorm" bottom: "conv5" top: "conv5"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "conv5_scale" type: "Scale" bottom: "conv5" top: "conv5"
#    param { lr_mult: 0 decay_mult: 0 }
#    param { lr_mult: 0 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu5" type: "ReLU" bottom: "conv5" top: "conv5" }

### pool5 

layer { name: "pool5" type: "Pooling" bottom: "conv5" top: "pool5" 
    pooling_param { pool: MAX kernel_size: 3 stride: 2 }
}

### fc6

layer { name: "fc6_" type: "Convolution" bottom: "pool5" top: "fc6_"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 4096 kernel_size: 17 pad: 0 stride: 1
    weight_filler { type: "msra" }
  }
}

#layer {
#    name: "fc6_bn" type: "BatchNorm" bottom: "fc6_" top: "fc6_"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "fc6_scale" type: "Scale" bottom: "fc6_" top: "fc6_"
#    param { lr_mult: 1 decay_mult: 1 }
#    param { lr_mult: 1 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu6" type: "ReLU" bottom: "fc6_" top: "fc6_" }

### fc7

layer { name: "fc7_" type: "Convolution" bottom: "fc6_" top: "fc7_"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 4096 pad:0 kernel_size: 1 stride: 1;
    weight_filler { type: "msra" }
  }
}

#layer {
#    name: "fc7_bn" type: "BatchNorm" bottom: "fc7_" top: "fc7_"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "fc7_scale" type: "Scale" bottom: "fc7_" top: "fc7_"
#    param { lr_mult: 1 decay_mult: 1 }
#    param { lr_mult: 1 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu7" type: "ReLU" bottom: "fc7_" top: "fc7_" }

### deconvfc6

layer { name: "deconvfc6" type: "Deconvolution" bottom: "fc7_" top: "deconvfc6"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
 
  convolution_param { num_output: 256 pad: 0 kernel_size: 17 stride: 1
      weight_filler { type: "msra" }
  }
}

#layer {
#    name: "deconvfc6_bn" type: "BatchNorm" bottom: "deconvfc6" top: "deconvfc6"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "deconvfc6_scale" type: "Scale" bottom: "deconvfc6" top: "deconvfc6"
#    param { lr_mult: 1 decay_mult: 1 }
#    param { lr_mult: 1 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu8" type: "ReLU" bottom: "deconvfc6" top: "deconvfc6" }

### unpooling5

layer { name: "unpool5" type: "UNPOOLING" bottom: "deconvfc6" top:"unpool5"
    unpooling_param { unpool: MAX kernel_size: 3 stride: 2 unpool_size: 35 }
}

### deconv5

layer { name: "deconv5" type: "Deconvolution" bottom: "unpool5" top: "deconv5"

  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
 
  convolution_param { num_output: 256 pad: 1 kernel_size: 3
      weight_filler { type: "msra" }
  }
}

#layer {
#    name: "deconv5_bn" type: "BatchNorm" bottom: "deconv5" top: "deconv5"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "deconv5_scale" type: "Scale" bottom: "deconv5" top: "deconv5"
#    param { lr_mult: 1 decay_mult: 1 }
#    param { lr_mult: 1 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu9" type: "ReLU" bottom: "deconv5" top: "deconv5" }

### deconv4

layer { name: "deconv4" type: "Deconvolution" bottom: "deconv5" top: "deconv4"

  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
 
  convolution_param { num_output: 384 pad: 1 kernel_size: 3
      weight_filler { type: "msra" }
  }
}

#layer {
#    name: "deconv4_bn" type: "BatchNorm" bottom: "deconv4" top: "deconv4"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "deconv4_scale" type: "Scale" bottom: "deconv4" top: "deconv4"
#    param { lr_mult: 1 decay_mult: 1 }
#    param { lr_mult: 1 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu10" type: "ReLU" bottom: "deconv4" top: "deconv4" }



### deconv3

layer { name: "deconv3" type: "Deconvolution" bottom: "deconv4" top: "deconv3"

  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
 
  convolution_param { num_output: 384 pad: 1 kernel_size: 3
      weight_filler { type: "msra" }
  }
}

#layer {
#    name: "deconv3_bn" type: "BatchNorm" bottom: "deconv3" top: "deconv3"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "deconv3_scale" type: "Scale" bottom: "deconv3" top: "deconv3"
#    param { lr_mult: 1 decay_mult: 1 }
#    param { lr_mult: 1 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu11" type: "ReLU" bottom: "deconv3" top: "deconv3" }

### unpooling2

layer { name: "unpool2" type: "UNPOOLING" bottom: "deconv3" top:"unpool2"
    unpooling_param { unpool: MAX kernel_size: 3 stride: 2 unpool_size: 71 }
 }

### deconv2

layer { name: "deconv2" type: "Deconvolution" bottom: "unpool2" top: "deconv2"

  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
 
  convolution_param { num_output: 256 pad: 2 kernel_size: 5
      weight_filler { type: "msra" }
  }
}

#layer {
#    name: "deconv2_bn" type: "BatchNorm" bottom: "deconv2" top: "deconv2"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "deconv2_scale" type: "Scale" bottom: "deconv2" top: "deconv2"
#    param { lr_mult: 1 decay_mult: 1 }
#    param { lr_mult: 1 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu12" type: "ReLU" bottom: "deconv2" top: "deconv2" }


### unpooling1

layer { name: "unpool1" type: "UNPOOLING" bottom: "deconv2" top:"unpool1"
    unpooling_param { unpool: MAX kernel_size: 3 stride: 2 unpool_size: 142 }
 }

### deconv1

layer { name: "deconv1" type: "Deconvolution" bottom: "unpool1" top: "deconv1"

  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
 
  convolution_param { num_output: 96 kernel_size: 11 stride: 4
      weight_filler { type: "msra" }
  }
}

#layer {
#    name: "deconv1_bn" type: "BatchNorm" bottom: "deconv1" top: "deconv1"
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    param { lr_mult: 0.0 decay_mult: 0.0}
#    batch_norm_param { use_global_stats: false }
#}

#layer { name: "deconv1_scale" type: "Scale" bottom: "deconv1" top: "deconv1"
#    param { lr_mult: 1 decay_mult: 1 }
#    param { lr_mult: 1 decay_mult: 0 }
#    scale_param { bias_term: true }
#}

layer { name: "relu13" type: "ReLU" bottom: "deconv1" top: "deconv1" }


### scoring

layer { name: "seg-score" type: "Convolution" bottom: "deconv1" top: "seg-score"
  param { lr_mult: 1 decay_mult: 1 }
  param { lr_mult: 2 decay_mult: 0 }
  convolution_param { num_output: 6 kernel_size: 1 stride: 1 pad: 1
    weight_filler { type: "msra" }
  }
}

### cropper
layer { name: "score" type: "Crop" bottom: "seg-score" bottom: "data" top: "score"
  crop_param { axis: 2 offset: 1 }
}

### loss

 layer { name: "loss" type: "SoftmaxWithLoss" bottom: "score" bottom: "label" top: "loss" 
    loss_param {
      class_loss_weights: 1         
      class_loss_weights: 100
      class_loss_weights: 100
      class_loss_weights: 100
      class_loss_weights: 100
      class_loss_weights: 100
      }
 }

}